name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PHP_VERSION: '8.4'
  NODE_VERSION: '22'

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          extensions: mbstring, dom, fileinfo, mysql, redis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: dependencies-composer-${{ hashFiles('composer.lock') }}
          restore-keys: dependencies-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

      - name: Install NPM dependencies
        run: npm ci

      - name: Check PHP syntax
        run: find . -name "*.php" -not -path "./vendor/*" -not -path "./storage/*" | xargs -I {} php -l {}

      - name: Run Laravel Pint (code style)
        run: ./vendor/bin/pint --test

      - name: Run PHPStan (static analysis)
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Check Composer security vulnerabilities
        run: ./vendor/bin/security-checker security:check composer.lock

      - name: Check NPM security vulnerabilities
        run: npm audit --audit-level=moderate

      - name: Run ESLint
        run: npm run lint

      - name: Check for outdated dependencies
        run: |
          composer outdated --direct --major-only --no-dev || true
          npm outdated || true

  # Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2
          coverage: xdebug
          extensions: mbstring, dom, fileinfo, mysql, redis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: dependencies-composer-${{ hashFiles('composer.lock') }}
          restore-keys: dependencies-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies
        run: npm ci

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Set testing environment
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Build assets
        run: npm run build

      - name: Generate Ziggy routes
        run: php artisan ziggy:generate

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Run PHPUnit tests with coverage
        run: ./vendor/bin/phpunit --coverage-clover coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build and prepare for deployment
  build:
    name: Build Assets
    runs-on: ubuntu-latest
    needs: [quality, tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

      - name: Install NPM dependencies
        run: npm ci

      - name: Build production assets
        run: npm run build

      - name: Create deployment artifact
        run: tar -czf deployment.tar.gz --exclude=node_modules --exclude=.git --exclude=tests .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ github.sha }}
          path: deployment.tar.gz

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.yourapp.com

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-${{ github.sha }}

      - name: Deploy to staging server
        run: |
          # This is a placeholder for your actual deployment script
          echo "Deploying to staging environment..."
          echo "Artifact: deployment.tar.gz"
          # Add your deployment commands here, e.g.:
          # rsync, ssh, docker deploy, etc.

      - name: Run post-deployment checks
        run: |
          # Health check example
          echo "Running health checks..."
          # curl -f https://staging.yourapp.com/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
          fi

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://yourapp.com

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-${{ github.sha }}

      - name: Deploy to production server
        run: |
          # This is a placeholder for your actual deployment script
          echo "Deploying to production environment..."
          echo "Artifact: deployment.tar.gz"
          # Add your deployment commands here

      - name: Run post-deployment checks
        run: |
          # Health check example
          echo "Running health checks..."
          # curl -f https://yourapp.com/health || exit 1

      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from commit ${{ github.sha }}
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production

    steps:
      - name: Rollback to previous version
        run: |
          echo "Rolling back to previous version..."
          # Add your rollback logic here
          # This could involve restoring from backup, 
          # reverting to previous Docker image, etc.

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          # Add health checks after rollback
