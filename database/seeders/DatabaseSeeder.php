<?php

namespace Database\Seeders;

use App\Models\Ad;
use App\Models\Company;
use App\Models\Deal;
use App\Models\Message;
use App\Models\Thread;
use App\Models\User;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->command->info('üè¢ –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏...');
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
        $companies = Company::factory()->count(15)->create();
        
        $this->command->info('üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏—è–º
        $users = collect();
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π (freelancers)
        $freelancers = User::factory()->count(10)->create([
            'company_id' => null,
        ]);
        $users = $users->merge($freelancers);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
        foreach ($companies as $company) {
            // –ö–∞–∂–¥–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏–º–µ–µ—Ç 1-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            $companyUsers = User::factory()
                ->count(fake()->numberBetween(1, 3))
                ->create([
                    'company_id' => $company->id,
                ]);
            $users = $users->merge($companyUsers);
        }
        
        $this->command->info('üì¢ –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è...');
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $ads = collect();
        foreach ($users as $user) {
            // –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –æ—Ç 0 –¥–æ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            $userAds = Ad::factory()
                ->count(fake()->numberBetween(0, 5))
                ->create([
                    'user_id' => $user->id,
                ]);
            $ads = $ads->merge($userAds);
        }
        
        $this->command->info('ü§ù –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫–∏...');
        
        // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        $publishedAds = $ads->where('status', 'published');
        $deals = collect();
        
        for ($i = 0; $i < 25; $i++) {
            if ($publishedAds->isEmpty()) break;
            
            $ad = $publishedAds->random();
            $seller = $ad->user;
            
            // –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
            $availableBuyers = $users->where('id', '!=', $seller->id);
            if ($availableBuyers->isEmpty()) continue;
            
            $buyer = $availableBuyers->random();
            
            $deal = Deal::factory()->create([
                'ad_id' => $ad->id,
                'buyer_id' => $buyer->id,
                'seller_id' => $seller->id,
            ]);
            
            $deals->push($deal);
        }
        
        $this->command->info('üí¨ –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        $threadsCount = 0;
        $messagesCount = 0;
        
        foreach ($publishedAds->take(20) as $ad) {
            // 60% —à–∞–Ω—Å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if (fake()->boolean(60)) {
                $thread = Thread::factory()->create([
                    'ad_id' => $ad->id,
                ]);
                $threadsCount++;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—Ä–µ–¥
                $participants = $users->where('id', '!=', $ad->user_id)
                    ->random(fake()->numberBetween(1, 3));
                
                $allParticipants = collect([$ad->user])->merge($participants)->unique('id');
                
                foreach ($allParticipants as $participant) {
                    $thread->participants()->attach($participant->id, [
                        'joined_at' => fake()->dateTimeBetween('-1 month', 'now'),
                    ]);
                }
                
                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥–µ
                $messageCount = fake()->numberBetween(2, 10);
                for ($j = 0; $j < $messageCount; $j++) {
                    Message::factory()->create([
                        'thread_id' => $thread->id,
                        'author_id' => $allParticipants->random()->id,
                    ]);
                    $messagesCount++;
                }
            }
        }
        
        $this->command->info('‚úÖ Seeding –∑–∞–≤–µ—Ä—à–µ–Ω!');
        $this->command->table(
            ['–ú–æ–¥–µ–ª—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
            [
                ['–ö–æ–º–ø–∞–Ω–∏–∏', $companies->count()],
                ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', $users->count()],
                ['–û–±—ä—è–≤–ª–µ–Ω–∏—è', $ads->count()],
                ['–°–¥–µ–ª–∫–∏', $deals->count()],
                ['–¢—Ä–µ–¥—ã', $threadsCount],
                ['–°–æ–æ–±—â–µ–Ω–∏—è', $messagesCount],
            ]
        );
    }
}
