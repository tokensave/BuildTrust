/**
 * üìù useAdForm - –ö–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π,
 * –≤–∫–ª—é—á–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—é, –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 * 
 * @example
 * ```typescript
 * const { form, submitCreate, submitUpdate } = useAdForm()
 * 
 * // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 * await submitCreate(userId)
 * 
 * // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * const { form } = useAdForm(existingAd)
 * await submitUpdate(userId, adId)
 * ```
 */

import { computed, watch } from 'vue'
import { useForm, router } from '@inertiajs/vue3'
import type { CreateAdForm, UpdateAdForm, Ad } from '@/features/ads/types/ad'
import { useNotifications } from '@/shared/composables/core/useNotifications'
import { useEnums } from '@/shared/composables/data/useEnums'

export function useAdForm(initialData?: Partial<Ad>) {
    const { showAdCreated, showAdUpdated, showError } = useNotifications()
    const { getCategoriesByType, getSubcategoriesByCategory } = useEnums()

    // –§–æ—Ä–º–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const form = useForm<CreateAdForm>({
        title: initialData?.title || '',
        description: initialData?.description || '',
        type: initialData?.type || 'goods',
        category: initialData?.category || undefined,
        subcategory: initialData?.subcategory || undefined,
        price: initialData?.price || undefined,
        location: initialData?.location || '',
        features: initialData?.features || [],
        images: [],
        is_urgent: initialData?.is_urgent || false,
        status: initialData?.status || 'draft'
    })

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const availableCategories = computed(() => {
        return getCategoriesByType(form.type)
    })

    const availableSubcategories = computed(() => {
        return form.category ? getSubcategoriesByCategory(form.category) : {}
    })

    // –°–±—Ä–æ—Å –∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö
    watch(() => form.type, () => {
        form.category = undefined
        form.subcategory = undefined
    })

    watch(() => form.category, () => {
        form.subcategory = undefined
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    const isFormValid = computed(() => {
        return !!(
            form.title &&
            form.description &&
            form.type &&
            !form.processing
        )
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const isDirty = computed(() => {
        return form.isDirty
    })

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const submitCreate = async (userId: number) => {
        if (!isFormValid.value) {
            showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
            return
        }

        form.post(route('user.ads.store', userId), {
            forceFormData: true, // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            onSuccess: () => {
                showAdCreated()
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                router.visit(route('user.ads.index', userId))
            },
            onError: (errors) => {
                console.error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors)
                showError('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã')
            }
        })
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const submitUpdate = async (userId: number, adId: number, updateData?: Partial<UpdateAdForm>) => {
        if (!isFormValid.value) {
            showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
            return
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const formData = updateData ? { ...form.data(), ...updateData } : form.data()

        form.put(route('user.ads.update', { user: userId, ad: adId }), {
            data: formData,
            forceFormData: true,
            onSuccess: () => {
                showAdUpdated()
                router.visit(route('user.ads.index', userId))
            },
            onError: (errors) => {
                console.error('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors)
                showError('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã')
            }
        })
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
    const saveAsDraft = async (userId: number, adId?: number) => {
        form.status = 'draft'
        
        if (adId) {
            await submitUpdate(userId, adId)
        } else {
            await submitCreate(userId)
        }
    }

    // –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    const publish = async (userId: number, adId?: number) => {
        form.status = 'published'
        
        if (adId) {
            await submitUpdate(userId, adId)
        } else {
            await submitCreate(userId)
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const addImages = (files: File[]) => {
        form.images = [...form.images, ...files]
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const removeImage = (index: number) => {
        form.images = form.images.filter((_, i) => i !== index)
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const addFeature = (feature: string) => {
        if (feature && !form.features.includes(feature)) {
            form.features = [...form.features, feature]
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const removeFeature = (feature: string) => {
        form.features = form.features.filter(f => f !== feature)
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    const resetForm = () => {
        form.reset()
    }

    return {
        // –§–æ—Ä–º–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        form,
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isFormValid,
        isDirty,
        
        // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        availableCategories,
        availableSubcategories,
        
        // –ú–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        submitCreate,
        submitUpdate,
        saveAsDraft,
        publish,
        
        // –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
        addImages,
        removeImage,
        addFeature,
        removeFeature,
        resetForm,
    }
}
