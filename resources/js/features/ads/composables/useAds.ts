/**
 * üì¢ useAds - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
 * 
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å API –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.
 * 
 * @example
 * ```typescript
 * const { ads, loading, loadAds, refreshAds } = useAds()
 * 
 * // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * await loadAds()
 * 
 * // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * await loadUserAds(userId)
 * 
 * // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
 * await refreshAds()
 * ```
 */

import { ref, computed } from 'vue'
import { router } from '@inertiajs/vue3'
import type { Ad, AdFilters } from '@/features/ads/types/ad'
import type { PaginatedResponse } from '@/shared/types/api'
import { useNotifications } from '@/shared/composables/useNotifications'

const ads = ref<Ad[]>([])
const loading = ref(false)
const error = ref<string | null>(null)
const currentPage = ref(1)
const totalPages = ref(1)
const totalCount = ref(0)

export function useAds() {
    const { showError } = useNotifications()

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    const loadAds = async (filters: AdFilters = {}, page = 1) => {
        loading.value = true
        error.value = null

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Inertia –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            router.get('/dashboard', { 
                ...filters, 
                page 
            }, {
                preserveState: true,
                preserveScroll: true,
                onSuccess: (page: any) => {
                    const adsData = page.props.ads
                    ads.value = adsData.data
                    currentPage.value = adsData.current_page
                    totalPages.value = adsData.last_page
                    totalCount.value = adsData.total
                },
                onError: (errors) => {
                    error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π'
                    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
                },
                onFinish: () => {
                    loading.value = false
                }
            })
        } catch (err) {
            error.value = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
            loading.value = false
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loadUserAds = async (userId: number) => {
        loading.value = true
        error.value = null

        try {
            router.get(`/user/${userId}/ads`, {}, {
                onSuccess: (page: any) => {
                    ads.value = page.props.ads
                },
                onError: () => {
                    error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
                },
                onFinish: () => {
                    loading.value = false
                }
            })
        } catch (err) {
            error.value = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
            loading.value = false
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const getAdById = async (adId: number): Promise<Ad | null> => {
        try {
            const response = await fetch(`/api/ads/${adId}`)
            if (!response.ok) throw new Error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            
            const data = await response.json()
            return data.data
        } catch (err) {
            showError('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return null
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    const refreshAds = async () => {
        // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        router.reload({ 
            preserveScroll: true,
            onStart: () => { loading.value = true },
            onFinish: () => { loading.value = false }
        })
    }

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    const hasAds = computed(() => ads.value.length > 0)
    const isEmpty = computed(() => !loading.value && ads.value.length === 0)
    const hasError = computed(() => error.value !== null)

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É (–¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞)
    const adsByStatus = computed(() => {
        return ads.value.reduce((groups, ad) => {
            const status = ad.status
            if (!groups[status]) {
                groups[status] = []
            }
            groups[status].push(ad)
            return groups
        }, {} as Record<string, Ad[]>)
    })

    // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusCounts = computed(() => {
        return {
            draft: ads.value.filter(ad => ad.status === 'draft').length,
            published: ads.value.filter(ad => ad.status === 'published').length,
            archived: ads.value.filter(ad => ad.status === 'archived').length,
        }
    })

    return {
        // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        ads,
        loading,
        error,
        currentPage,
        totalPages,
        totalCount,

        // –ú–µ—Ç–æ–¥—ã
        loadAds,
        loadUserAds,
        getAdById,
        refreshAds,

        // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        hasAds,
        isEmpty,
        hasError,
        adsByStatus,
        statusCounts,
    }
}
