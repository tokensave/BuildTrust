/**
 * üìã useEnums - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (enum'—ã)
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö enum'–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞.
 * –ó–∞–º–µ–Ω—è–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –µ–¥–∏–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã.
 * 
 * @example
 * ```typescript
 * const { enums, loading, getStatusLabel, getStatusColor } = useEnums()
 * 
 * // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * await loadEnums()
 * 
 * // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
 * const statusLabel = getStatusLabel('published', 'ad')
 * const statusColor = getStatusColor('pending', 'deal')
 * ```
 */

import { ref, computed } from 'vue'
import type { EnumOption } from '@/shared/types/api'

interface AppEnums {
    adStatuses: EnumOption[]
    adTypes: EnumOption[]
    dealStatuses: EnumOption[]
    categories_structure: Record<string, {
        label: string
        subcategories: Record<string, EnumOption>
    }>
}

const enums = ref<AppEnums>({
    adStatuses: [],
    adTypes: [],
    dealStatuses: [],
    categories_structure: {}
})

const loading = ref(false)
const error = ref<string | null>(null)

export function useEnums() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö enum'–æ–≤ —Å API
    const loadEnums = async () => {
        if (enums.value.adStatuses.length > 0) return // –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

        loading.value = true
        error.value = null

        try {
            const response = await fetch('/api/filters/all-enums')
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤')
            
            const data = await response.json()
            enums.value = {
                adStatuses: data.adStatuses || [],
                adTypes: Object.values(data.adTypes || {}),
                dealStatuses: data.dealStatuses || [],
                categories_structure: data.categories_structure || {}
            }
        } catch (err) {
            error.value = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ enum\'–æ–≤:', err)
        } finally {
            loading.value = false
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–π–±–ª–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusLabel = (status: string, type: 'ad' | 'deal' = 'ad'): string => {
        const statusList = type === 'ad' ? enums.value.adStatuses : enums.value.dealStatuses
        return statusList.find(s => s.value === status)?.label || status
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusColor = (status: string, type: 'ad' | 'deal' = 'ad'): string => {
        const statusList = type === 'ad' ? enums.value.adStatuses : enums.value.dealStatuses
        return statusList.find(s => s.value === status)?.color || 'gray'
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    const getAdTypes = computed(() => enums.value.adTypes)

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ç–∏–ø—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const getCategoriesByType = (type: string) => {
        // –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ç–∏–ø—É
        const allCategories = enums.value.categories_structure
        
        if (type === 'goods') {
            return Object.fromEntries(
                Object.entries(allCategories).filter(([key]) => 
                    ['materials', 'tools', 'equipment'].includes(key)
                )
            )
        } else if (type === 'services') {
            return Object.fromEntries(
                Object.entries(allCategories).filter(([key]) => 
                    ['construction', 'repair', 'design'].includes(key)
                )
            )
        }
        
        return allCategories
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const getSubcategoriesByCategory = (category: string) => {
        return enums.value.categories_structure[category]?.subcategories || {}
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const isLoaded = computed(() => enums.value.adStatuses.length > 0)

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        enums,
        loading,
        error,
        isLoaded,

        // –ú–µ—Ç–æ–¥—ã
        loadEnums,
        getStatusLabel,
        getStatusColor,
        getCategoriesByType,
        getSubcategoriesByCategory,

        // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        getAdTypes,
    }
}
